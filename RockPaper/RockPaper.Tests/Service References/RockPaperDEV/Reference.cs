//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestProject.RockPaperDEV {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RockPaperDEV.IRockPaperService")]
    public interface IRockPaperService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/GetNextAvailableGame", ReplyAction="http://tempuri.org/IRockPaperService/GetNextAvailableGameResponse")]
        Contracts.Response.ResponseItem<System.Guid> GetNextAvailableGame(System.Guid teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/GetNextAvailableGame", ReplyAction="http://tempuri.org/IRockPaperService/GetNextAvailableGameResponse")]
        System.Threading.Tasks.Task<Contracts.Response.ResponseItem<System.Guid>> GetNextAvailableGameAsync(System.Guid teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/IsItMyTurn", ReplyAction="http://tempuri.org/IRockPaperService/IsItMyTurnResponse")]
        Contracts.Response.ResponseItem<bool> IsItMyTurn(System.Guid gameId, System.Guid teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/IsItMyTurn", ReplyAction="http://tempuri.org/IRockPaperService/IsItMyTurnResponse")]
        System.Threading.Tasks.Task<Contracts.Response.ResponseItem<bool>> IsItMyTurnAsync(System.Guid gameId, System.Guid teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/PlayHand", ReplyAction="http://tempuri.org/IRockPaperService/PlayHandResponse")]
        Contracts.Response.ResponseItem<Contracts.OperationOutcome> PlayHand(System.Guid gameId, System.Guid teamId, Contracts.Common.Hand hand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/PlayHand", ReplyAction="http://tempuri.org/IRockPaperService/PlayHandResponse")]
        System.Threading.Tasks.Task<Contracts.Response.ResponseItem<Contracts.OperationOutcome>> PlayHandAsync(System.Guid gameId, System.Guid teamId, Contracts.Common.Hand hand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/GetGamebyGameId", ReplyAction="http://tempuri.org/IRockPaperService/GetGamebyGameIdResponse")]
        Contracts.Response.ResponseItem<Contracts.Api.Game> GetGamebyGameId(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/GetGamebyGameId", ReplyAction="http://tempuri.org/IRockPaperService/GetGamebyGameIdResponse")]
        System.Threading.Tasks.Task<Contracts.Response.ResponseItem<Contracts.Api.Game>> GetGamebyGameIdAsync(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/RegisterTeam", ReplyAction="http://tempuri.org/IRockPaperService/RegisterTeamResponse")]
        Contracts.Response.ResponseItem<Contracts.Providers.Team> RegisterTeam(string teamName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/RegisterTeam", ReplyAction="http://tempuri.org/IRockPaperService/RegisterTeamResponse")]
        System.Threading.Tasks.Task<Contracts.Response.ResponseItem<Contracts.Providers.Team>> RegisterTeamAsync(string teamName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/GetTeamByTeamName", ReplyAction="http://tempuri.org/IRockPaperService/GetTeamByTeamNameResponse")]
        Contracts.Response.ResponseItem<Contracts.Providers.Team> GetTeamByTeamName(string teamName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/GetTeamByTeamName", ReplyAction="http://tempuri.org/IRockPaperService/GetTeamByTeamNameResponse")]
        System.Threading.Tasks.Task<Contracts.Response.ResponseItem<Contracts.Providers.Team>> GetTeamByTeamNameAsync(string teamName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRockPaperServiceChannel : TestProject.RockPaperDEV.IRockPaperService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RockPaperServiceClient : System.ServiceModel.ClientBase<TestProject.RockPaperDEV.IRockPaperService>, TestProject.RockPaperDEV.IRockPaperService {
        
        public RockPaperServiceClient() {
        }
        
        public RockPaperServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RockPaperServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RockPaperServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RockPaperServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Contracts.Response.ResponseItem<System.Guid> GetNextAvailableGame(System.Guid teamId) {
            return base.Channel.GetNextAvailableGame(teamId);
        }
        
        public System.Threading.Tasks.Task<Contracts.Response.ResponseItem<System.Guid>> GetNextAvailableGameAsync(System.Guid teamId) {
            return base.Channel.GetNextAvailableGameAsync(teamId);
        }
        
        public Contracts.Response.ResponseItem<bool> IsItMyTurn(System.Guid gameId, System.Guid teamId) {
            return base.Channel.IsItMyTurn(gameId, teamId);
        }
        
        public System.Threading.Tasks.Task<Contracts.Response.ResponseItem<bool>> IsItMyTurnAsync(System.Guid gameId, System.Guid teamId) {
            return base.Channel.IsItMyTurnAsync(gameId, teamId);
        }
        
        public Contracts.Response.ResponseItem<Contracts.OperationOutcome> PlayHand(System.Guid gameId, System.Guid teamId, Contracts.Common.Hand hand) {
            return base.Channel.PlayHand(gameId, teamId, hand);
        }
        
        public System.Threading.Tasks.Task<Contracts.Response.ResponseItem<Contracts.OperationOutcome>> PlayHandAsync(System.Guid gameId, System.Guid teamId, Contracts.Common.Hand hand) {
            return base.Channel.PlayHandAsync(gameId, teamId, hand);
        }
        
        public Contracts.Response.ResponseItem<Contracts.Api.Game> GetGamebyGameId(System.Guid gameId) {
            return base.Channel.GetGamebyGameId(gameId);
        }
        
        public System.Threading.Tasks.Task<Contracts.Response.ResponseItem<Contracts.Api.Game>> GetGamebyGameIdAsync(System.Guid gameId) {
            return base.Channel.GetGamebyGameIdAsync(gameId);
        }
        
        public Contracts.Response.ResponseItem<Contracts.Providers.Team> RegisterTeam(string teamName) {
            return base.Channel.RegisterTeam(teamName);
        }
        
        public System.Threading.Tasks.Task<Contracts.Response.ResponseItem<Contracts.Providers.Team>> RegisterTeamAsync(string teamName) {
            return base.Channel.RegisterTeamAsync(teamName);
        }
        
        public Contracts.Response.ResponseItem<Contracts.Providers.Team> GetTeamByTeamName(string teamName) {
            return base.Channel.GetTeamByTeamName(teamName);
        }
        
        public System.Threading.Tasks.Task<Contracts.Response.ResponseItem<Contracts.Providers.Team>> GetTeamByTeamNameAsync(string teamName) {
            return base.Channel.GetTeamByTeamNameAsync(teamName);
        }
    }
}
