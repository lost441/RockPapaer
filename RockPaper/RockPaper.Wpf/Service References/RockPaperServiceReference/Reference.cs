//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RockPaper.Wpf.RockPaperServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Result", Namespace="http://schemas.datacontract.org/2004/07/RockPaper.Contracts.Response")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfboolean))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfOperationOutcome_ShMyOgxf))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfGameiiBVlPgH))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfTeamthdB4o0U))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfguid))]
    public partial class Result : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] ErrorsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsSuccessfullField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResultDescriptionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Errors {
            get {
                return this.ErrorsField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorsField, value) != true)) {
                    this.ErrorsField = value;
                    this.RaisePropertyChanged("Errors");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsSuccessfull {
            get {
                return this.IsSuccessfullField;
            }
            set {
                if ((this.IsSuccessfullField.Equals(value) != true)) {
                    this.IsSuccessfullField = value;
                    this.RaisePropertyChanged("IsSuccessfull");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultCode {
            get {
                return this.ResultCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultCodeField, value) != true)) {
                    this.ResultCodeField = value;
                    this.RaisePropertyChanged("ResultCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResultDescription {
            get {
                return this.ResultDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.ResultDescriptionField, value) != true)) {
                    this.ResultDescriptionField = value;
                    this.RaisePropertyChanged("ResultDescription");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseItemOfboolean", Namespace="http://schemas.datacontract.org/2004/07/RockPaper.Contracts.Response")]
    [System.SerializableAttribute()]
    public partial class ResponseItemOfboolean : RockPaper.Wpf.RockPaperServiceReference.Result {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Data {
            get {
                return this.DataField;
            }
            set {
                if ((this.DataField.Equals(value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseItemOfOperationOutcome_ShMyOgxf", Namespace="http://schemas.datacontract.org/2004/07/RockPaper.Contracts.Response")]
    [System.SerializableAttribute()]
    public partial class ResponseItemOfOperationOutcome_ShMyOgxf : RockPaper.Wpf.RockPaperServiceReference.Result {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RockPaper.Wpf.RockPaperServiceReference.OperationOutcome DataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RockPaper.Wpf.RockPaperServiceReference.OperationOutcome Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseItemOfGameiiBVlPgH", Namespace="http://schemas.datacontract.org/2004/07/RockPaper.Contracts.Response")]
    [System.SerializableAttribute()]
    public partial class ResponseItemOfGameiiBVlPgH : RockPaper.Wpf.RockPaperServiceReference.Result {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RockPaper.Wpf.RockPaperServiceReference.Game DataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RockPaper.Wpf.RockPaperServiceReference.Game Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseItemOfTeamthdB4o0U", Namespace="http://schemas.datacontract.org/2004/07/RockPaper.Contracts.Response")]
    [System.SerializableAttribute()]
    public partial class ResponseItemOfTeamthdB4o0U : RockPaper.Wpf.RockPaperServiceReference.Result {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RockPaper.Wpf.RockPaperServiceReference.Team DataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RockPaper.Wpf.RockPaperServiceReference.Team Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResponseItemOfguid", Namespace="http://schemas.datacontract.org/2004/07/RockPaper.Contracts.Response")]
    [System.SerializableAttribute()]
    public partial class ResponseItemOfguid : RockPaper.Wpf.RockPaperServiceReference.Result {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid DataField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Data {
            get {
                return this.DataField;
            }
            set {
                if ((this.DataField.Equals(value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OperationOutcome", Namespace="http://schemas.datacontract.org/2004/07/RockPaper.Contracts")]
    [System.SerializableAttribute()]
    public partial class OperationOutcome : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ErrorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ResultField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Error {
            get {
                return this.ErrorField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorField, value) != true)) {
                    this.ErrorField = value;
                    this.RaisePropertyChanged("Error");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Result {
            get {
                return this.ResultField;
            }
            set {
                if ((this.ResultField.Equals(value) != true)) {
                    this.ResultField = value;
                    this.RaisePropertyChanged("Result");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game", Namespace="http://schemas.datacontract.org/2004/07/RockPaper.Contracts.Api")]
    [System.SerializableAttribute()]
    public partial class Game : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private RockPaper.Wpf.RockPaperServiceReference.GameState GameStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsCompleteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamName1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamName2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string WinningTeamField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public RockPaper.Wpf.RockPaperServiceReference.GameState GameState {
            get {
                return this.GameStateField;
            }
            set {
                if ((this.GameStateField.Equals(value) != true)) {
                    this.GameStateField = value;
                    this.RaisePropertyChanged("GameState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsComplete {
            get {
                return this.IsCompleteField;
            }
            set {
                if ((this.IsCompleteField.Equals(value) != true)) {
                    this.IsCompleteField = value;
                    this.RaisePropertyChanged("IsComplete");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamName1 {
            get {
                return this.TeamName1Field;
            }
            set {
                if ((object.ReferenceEquals(this.TeamName1Field, value) != true)) {
                    this.TeamName1Field = value;
                    this.RaisePropertyChanged("TeamName1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamName2 {
            get {
                return this.TeamName2Field;
            }
            set {
                if ((object.ReferenceEquals(this.TeamName2Field, value) != true)) {
                    this.TeamName2Field = value;
                    this.RaisePropertyChanged("TeamName2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WinningTeam {
            get {
                return this.WinningTeamField;
            }
            set {
                if ((object.ReferenceEquals(this.WinningTeamField, value) != true)) {
                    this.WinningTeamField = value;
                    this.RaisePropertyChanged("WinningTeam");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameState", Namespace="http://schemas.datacontract.org/2004/07/RockPaper.Contracts.Common")]
    public enum GameState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WaitingForPlayers = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Player1Hand = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Player2Hand = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Complete = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Team", Namespace="http://schemas.datacontract.org/2004/07/RockPaper.Contracts.Providers")]
    [System.SerializableAttribute()]
    public partial class Team : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Guid IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TeamNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TeamName {
            get {
                return this.TeamNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TeamNameField, value) != true)) {
                    this.TeamNameField = value;
                    this.RaisePropertyChanged("TeamName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Hand", Namespace="http://schemas.datacontract.org/2004/07/RockPaper.Contracts.Common")]
    public enum Hand : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        None = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Rock = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Paper = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Scissor = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Lizard = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Spock = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RockPaperServiceReference.IRockPaperService")]
    public interface IRockPaperService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/GetNextAvailableGame", ReplyAction="http://tempuri.org/IRockPaperService/GetNextAvailableGameResponse")]
        RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfguid GetNextAvailableGame(System.Guid teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/GetNextAvailableGame", ReplyAction="http://tempuri.org/IRockPaperService/GetNextAvailableGameResponse")]
        System.Threading.Tasks.Task<RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfguid> GetNextAvailableGameAsync(System.Guid teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/IsItMyTurn", ReplyAction="http://tempuri.org/IRockPaperService/IsItMyTurnResponse")]
        RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfboolean IsItMyTurn(System.Guid gameId, System.Guid teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/IsItMyTurn", ReplyAction="http://tempuri.org/IRockPaperService/IsItMyTurnResponse")]
        System.Threading.Tasks.Task<RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfboolean> IsItMyTurnAsync(System.Guid gameId, System.Guid teamId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/PlayHand", ReplyAction="http://tempuri.org/IRockPaperService/PlayHandResponse")]
        RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfOperationOutcome_ShMyOgxf PlayHand(System.Guid gameId, System.Guid teamId, RockPaper.Wpf.RockPaperServiceReference.Hand hand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/PlayHand", ReplyAction="http://tempuri.org/IRockPaperService/PlayHandResponse")]
        System.Threading.Tasks.Task<RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfOperationOutcome_ShMyOgxf> PlayHandAsync(System.Guid gameId, System.Guid teamId, RockPaper.Wpf.RockPaperServiceReference.Hand hand);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/GetGamebyGameId", ReplyAction="http://tempuri.org/IRockPaperService/GetGamebyGameIdResponse")]
        RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfGameiiBVlPgH GetGamebyGameId(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/GetGamebyGameId", ReplyAction="http://tempuri.org/IRockPaperService/GetGamebyGameIdResponse")]
        System.Threading.Tasks.Task<RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfGameiiBVlPgH> GetGamebyGameIdAsync(System.Guid gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/RegisterTeam", ReplyAction="http://tempuri.org/IRockPaperService/RegisterTeamResponse")]
        RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfTeamthdB4o0U RegisterTeam(string teamName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/RegisterTeam", ReplyAction="http://tempuri.org/IRockPaperService/RegisterTeamResponse")]
        System.Threading.Tasks.Task<RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfTeamthdB4o0U> RegisterTeamAsync(string teamName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/GetTeamByTeamName", ReplyAction="http://tempuri.org/IRockPaperService/GetTeamByTeamNameResponse")]
        RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfTeamthdB4o0U GetTeamByTeamName(string teamName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRockPaperService/GetTeamByTeamName", ReplyAction="http://tempuri.org/IRockPaperService/GetTeamByTeamNameResponse")]
        System.Threading.Tasks.Task<RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfTeamthdB4o0U> GetTeamByTeamNameAsync(string teamName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRockPaperServiceChannel : RockPaper.Wpf.RockPaperServiceReference.IRockPaperService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RockPaperServiceClient : System.ServiceModel.ClientBase<RockPaper.Wpf.RockPaperServiceReference.IRockPaperService>, RockPaper.Wpf.RockPaperServiceReference.IRockPaperService {
        
        public RockPaperServiceClient() {
        }
        
        public RockPaperServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RockPaperServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RockPaperServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RockPaperServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfguid GetNextAvailableGame(System.Guid teamId) {
            return base.Channel.GetNextAvailableGame(teamId);
        }
        
        public System.Threading.Tasks.Task<RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfguid> GetNextAvailableGameAsync(System.Guid teamId) {
            return base.Channel.GetNextAvailableGameAsync(teamId);
        }
        
        public RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfboolean IsItMyTurn(System.Guid gameId, System.Guid teamId) {
            return base.Channel.IsItMyTurn(gameId, teamId);
        }
        
        public System.Threading.Tasks.Task<RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfboolean> IsItMyTurnAsync(System.Guid gameId, System.Guid teamId) {
            return base.Channel.IsItMyTurnAsync(gameId, teamId);
        }
        
        public RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfOperationOutcome_ShMyOgxf PlayHand(System.Guid gameId, System.Guid teamId, RockPaper.Wpf.RockPaperServiceReference.Hand hand) {
            return base.Channel.PlayHand(gameId, teamId, hand);
        }
        
        public System.Threading.Tasks.Task<RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfOperationOutcome_ShMyOgxf> PlayHandAsync(System.Guid gameId, System.Guid teamId, RockPaper.Wpf.RockPaperServiceReference.Hand hand) {
            return base.Channel.PlayHandAsync(gameId, teamId, hand);
        }
        
        public RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfGameiiBVlPgH GetGamebyGameId(System.Guid gameId) {
            return base.Channel.GetGamebyGameId(gameId);
        }
        
        public System.Threading.Tasks.Task<RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfGameiiBVlPgH> GetGamebyGameIdAsync(System.Guid gameId) {
            return base.Channel.GetGamebyGameIdAsync(gameId);
        }
        
        public RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfTeamthdB4o0U RegisterTeam(string teamName) {
            return base.Channel.RegisterTeam(teamName);
        }
        
        public System.Threading.Tasks.Task<RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfTeamthdB4o0U> RegisterTeamAsync(string teamName) {
            return base.Channel.RegisterTeamAsync(teamName);
        }
        
        public RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfTeamthdB4o0U GetTeamByTeamName(string teamName) {
            return base.Channel.GetTeamByTeamName(teamName);
        }
        
        public System.Threading.Tasks.Task<RockPaper.Wpf.RockPaperServiceReference.ResponseItemOfTeamthdB4o0U> GetTeamByTeamNameAsync(string teamName) {
            return base.Channel.GetTeamByTeamNameAsync(teamName);
        }
    }
}
